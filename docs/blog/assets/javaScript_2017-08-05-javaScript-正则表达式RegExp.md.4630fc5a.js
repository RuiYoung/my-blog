import{_ as l,o as a,c as n,Q as e,A as t}from"./chunks/framework.544e8ca7.js";const f=JSON.parse('{"title":"正则表达式RegExp","description":"","frontmatter":{"title":"正则表达式RegExp","date":"2017-07-15T00:00:00.000Z","author":"Ruiyoung","tag":["javaScript"]},"headers":[],"relativePath":"javaScript/2017-08-05-javaScript-正则表达式RegExp.md","lastUpdated":null}'),r={name:"javaScript/2017-08-05-javaScript-正则表达式RegExp.md"},d=e('<h3 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h3><blockquote><p>RegExp 对象表示正则表达式，它是对字符串执行模式匹配的强大工具。<br> 正则表达式简洁且功能强大，通常用来匹配字符串，比如在表单验证中检验用户输入是否合法。它并不仅仅在 JavaScript 中可以使用，众多的高级编程语言都支持正则表达式。</p></blockquote><h4 id="字符串常用操作方法" tabindex="-1">字符串常用操作方法 <a class="header-anchor" href="#字符串常用操作方法" aria-label="Permalink to &quot;字符串常用操作方法&quot;">​</a></h4><ul><li>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。(该参数可以是需要在 stringObject 中检索的子串，也可以是需要检索的 RegExp 对象。)</li><li>match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。(该方法类似 indexOf() 和 lastIndexOf()，但是它返回指定的值，而不是字符串的位置。)</li><li>replace() 方法用于在字符串中用一些字符替换另一些字符，或替换一个与正则表达式匹配的子串。</li><li>split() 方法用于把一个字符串分割成字符串数组。</li></ul><h4 id="创建正则表达式的两种方法" tabindex="-1">创建正则表达式的两种方法 <a class="header-anchor" href="#创建正则表达式的两种方法" aria-label="Permalink to &quot;创建正则表达式的两种方法&quot;">​</a></h4><ul><li>new RegExp(pattern, attributes);</li><li>/pattern/attributes</li><li>参数介绍：<br>   参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式。<br>   参数 attributes 是一个可选的字符串，包含属性 &quot;g&quot;、&quot;i&quot; 分别用于指定全局匹配、区分大小写的匹配。</li><li>返回值：一个新的 RegExp 对象，具有指定的模式和标志。</li></ul><h4 id="修饰符" tabindex="-1">修饰符 <a class="header-anchor" href="#修饰符" aria-label="Permalink to &quot;修饰符&quot;">​</a></h4><table><thead><tr><th style="text-align:center;">修饰符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">i</td><td style="text-align:left;">执行对大小写不敏感的匹配。</td></tr><tr><td style="text-align:center;">g</td><td style="text-align:left;">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td></tr><tr><td style="text-align:center;">m</td><td style="text-align:left;">执行多行匹配。</td></tr></tbody></table><h4 id="方括号" tabindex="-1">方括号 <a class="header-anchor" href="#方括号" aria-label="Permalink to &quot;方括号&quot;">​</a></h4><p>用于查找某个范围内的字符</p><table><thead><tr><th style="text-align:center;">表达式</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">[abc]</td><td style="text-align:left;">查找方括号之间的任何字符。</td></tr><tr><td style="text-align:center;">[^abc]</td><td style="text-align:left;">查找任何不在方括号之间的字符。</td></tr><tr><td style="text-align:center;">[0-9]</td><td style="text-align:left;">查找任何从 0 至 9 的数字。</td></tr><tr><td style="text-align:center;">[a-z]</td><td style="text-align:left;">查找任何从小写 a 到小写 z 的字符。</td></tr><tr><td style="text-align:center;">[A-Z]</td><td style="text-align:left;">查找任何从大写 A 到大写 Z 的字符。</td></tr><tr><td style="text-align:center;">[A-z]</td><td style="text-align:left;">查找任何从大写 A 到小写 z 的字符。</td></tr><tr><td style="text-align:center;">[adgk]</td><td style="text-align:left;">查找给定集合内的任何字符。</td></tr><tr><td style="text-align:center;">[^adgk]</td><td style="text-align:left;">查找给定集合外的任何字符。</td></tr><tr><td style="text-align:center;">(red | blue | green)</td><td style="text-align:left;">查找任何指定的选项。</td></tr></tbody></table><h4 id="元字符" tabindex="-1">元字符 <a class="header-anchor" href="#元字符" aria-label="Permalink to &quot;元字符&quot;">​</a></h4><p>拥有特殊含义的字符</p><table><thead><tr><th style="text-align:center;">元字符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:center;">.</td><td style="text-align:left;">查找单个字符，除了换行和行结束符。</td></tr><tr><td style="text-align:center;">\\w</td><td style="text-align:left;">查找单词字符(包括英文字母，数字，下划线)。</td></tr><tr><td style="text-align:center;">\\W</td><td style="text-align:left;">查找非单词字符(包括非英文字母，数字，下划线之外的字符)。</td></tr><tr><td style="text-align:center;">\\d</td><td style="text-align:left;">查找数字。</td></tr><tr><td style="text-align:center;">\\D</td><td style="text-align:left;">查找非数字字符。</td></tr><tr><td style="text-align:center;">\\s</td><td style="text-align:left;">查找空白字符。</td></tr><tr><td style="text-align:center;">\\S</td><td style="text-align:left;">查找非空白字符。</td></tr><tr><td style="text-align:center;">\\b</td><td style="text-align:left;">匹配单词边界。</td></tr><tr><td style="text-align:center;">\\0</td><td style="text-align:left;">查找 NUL 字符。</td></tr><tr><td style="text-align:center;">\\n</td><td style="text-align:left;">查找换行符。</td></tr><tr><td style="text-align:center;">\\f</td><td style="text-align:left;">查找换页符。</td></tr><tr><td style="text-align:center;">\\r</td><td style="text-align:left;">查找回车符。</td></tr><tr><td style="text-align:center;">\\t</td><td style="text-align:left;">查找制表符。</td></tr><tr><td style="text-align:center;">\\v</td><td style="text-align:left;">查找垂直制表符。</td></tr><tr><td style="text-align:center;">\\xxx</td><td style="text-align:left;">查找以八进制数 xxx 规定的字符。</td></tr><tr><td style="text-align:center;">\\xdd</td><td style="text-align:left;">查找以十六进制数 dd 规定的字符。</td></tr><tr><td style="text-align:center;">\\uxxxx</td><td style="text-align:left;">查找以十六进制数 xxxx 规定的 Unicode 字符。</td></tr></tbody></table><h4 id="量词" tabindex="-1">量词 <a class="header-anchor" href="#量词" aria-label="Permalink to &quot;量词&quot;">​</a></h4>',15),i=t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"center"}},"量词"),t("th",{style:{"text-align":"left"}},"描述")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"center"}},"n+"),t("td",{style:{"text-align":"left"}},"匹配任何包含至少一个 n 的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"n*"),t("td",{style:{"text-align":"left"}},"匹配任何包含零个或多个 n 的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"n?"),t("td",{style:{"text-align":"left"}},"匹配任何包含零个或一个 n 的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"},X:""},"n"),t("td",{style:{"text-align":"left"}},"匹配包含 X 个 n 的序列的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"},"X,Y":""},"n"),t("td",{style:{"text-align":"left"}},"匹配包含 X 或 Y 个 n 的序列的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"},"X,":""},"n"),t("td",{style:{"text-align":"left"}},"匹配包含至少 X 个 n 的序列的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"n$"),t("td",{style:{"text-align":"left"}},"匹配任何结尾为 n 的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"^n"),t("td",{style:{"text-align":"left"}},"匹配任何开头为 n 的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"?=n"),t("td",{style:{"text-align":"left"}},"匹配任何其后紧接指定字符串 n 的字符串。")]),t("tr",null,[t("td",{style:{"text-align":"center"}},"?!n"),t("td",{style:{"text-align":"left"}},"匹配任何其后没有紧接指定字符串 n 的字符串。")])])],-1),s=e('<h4 id="regexp-对象属性" tabindex="-1">RegExp 对象属性 <a class="header-anchor" href="#regexp-对象属性" aria-label="Permalink to &quot;RegExp 对象属性&quot;">​</a></h4><ul><li><strong>global RegExp 对象是否具有标志 g。</strong><br>   语法：RegExpObject.global<br>   如果 g 标志被设置，则该属性为 true，否则为 false。</li><li><strong>ignoreCase RegExp 对象是否具有标志 i。</strong><br>   语法：RegExpObject.ignoreCase<br>   如果设置了 &quot;i&quot; 标志，则返回 true，否则返回 false。</li><li><strong>multiline RegExp 对象是否具有标志 m。</strong><br>   语法：RegExpObject.multiline<br>   如果 m 标志被设置，则该属性为 true，否则为 false。</li><li><strong>source 正则表达式的源文本。</strong><br>   语法：RegExpObject.source<br>   source 属性用于返回模式匹配所用的文本。该文本不包括正则表达式直接量使用的定界符，也不包括标志 g、i、m。</li><li><strong>lastIndex 一个整数，标示开始下一次匹配的字符位置。</strong><br>   语法：RegExpObject.lastIndex<br>   该属性存放一个整数，它声明的是上一次匹配文本之后的第一个字符的位置。多用于在一个字符串中进行多次匹配<br>   上次匹配的结果是由方法 RegExp.exec() 和 RegExp.test() 找到的，它们都以 lastIndex 属性所指的位置作为下次检索的起始点。这样，就可以通过反复调用这两个方法来遍历一个字符串中的所有匹配文本。<br>   不具有标志 g 和不表示全局模式的 RegExp 对象不能使用 lastIndex 属性。</li></ul><h4 id="regexp-对象方法" tabindex="-1">RegExp 对象方法 <a class="header-anchor" href="#regexp-对象方法" aria-label="Permalink to &quot;RegExp 对象方法&quot;">​</a></h4><ul><li><p>compile 编译正则表达式。<br>   compile 方法将正则表达式转换为内部的格式，从而执行得更快。例如，这允许在循环中更有效地使用正则表达式。当重复使用相同的表达式时，编译过的正则表达式使执行加速。</p></li><li><p>test 检索字符串中指定的值。返回 true 或 false。   语法：RegExpObject.test(string)<br>   如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</p></li><li><p>exec 检索字符串中指定的值。返回找到的值，并确定其位置。   如果 exec 方法没有找到匹配，将返回 null。如果找到匹配项，则 exec 方法返回一个数组。   数组元素 0 包含了完整的匹配项，而元素 1 到 n 包含的是匹配项中出现的任意一个子匹配项。   除了数组元素和 length 属性之外，exec() 方法还返回两个属性。index 属性声明的是匹配文本的第一个字符的位置。input 属性则存放的是被检索的字符串 string。在调用非全局的 RegExp 对象的 exec() 方法时，返回的数组与调用方法 String.match() 返回的数组是相同的。   当 RegExpObject 是一个全局正则表达式时，exec() 会在 RegExpObject 的 lastIndex 属性指定的字符处开始检索字符串 string。当 exec() 找到了与表达式相匹配的文本时，在匹配后，它将把 RegExpObject 的 lastIndex 属性设置为匹配文本的最后一个字符的下一个位置。</p></li></ul>',4),x=[d,i,s];function g(c,o,y,h,u,p){return a(),n("div",null,x)}const _=l(r,[["render",g]]);export{f as __pageData,_ as default};
