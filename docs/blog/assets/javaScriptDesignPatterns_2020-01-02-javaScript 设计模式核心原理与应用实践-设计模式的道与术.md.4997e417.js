import{_ as a,o as e,c as t,Q as i}from"./chunks/framework.544e8ca7.js";const r="/img/shejimoshi.png",m=JSON.parse('{"title":"设计模式的道与术","description":"","frontmatter":{"title":"设计模式的道与术","date":"2020-01-02T00:00:00.000Z","author":"Ruiyoung","tag":["javaScript设计模式"]},"headers":[],"relativePath":"javaScriptDesignPatterns/2020-01-02-javaScript 设计模式核心原理与应用实践-设计模式的道与术.md","lastUpdated":null}'),o={name:"javaScriptDesignPatterns/2020-01-02-javaScript 设计模式核心原理与应用实践-设计模式的道与术.md"},n=i('<h4 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h4><blockquote><p>每一个模式描述了一个在我们周围不断重复发生的问题，以及该问题的解决方案的核心。这样，你就能一次又一次地使用该方案而不必做重复劳动。</p></blockquote><h4 id="solid-设计原则" tabindex="-1">SOLID 设计原则 <a class="header-anchor" href="#solid-设计原则" aria-label="Permalink to &quot;SOLID 设计原则&quot;">​</a></h4><p>设计原则是设计模式的指导理论，它可以帮助我们规避不良的软件设计。SOLID 指代的五个基本原则分别是：</p><ul><li>单一功能原则（Single Responsibility Principle）</li><li>开放封闭原则（Opened Closed Principle）</li><li>里式替换原则（Liskov Substitution Principle）</li><li>接口隔离原则（Interface Segregation Principle）</li><li>依赖反转原则（Dependency Inversion Principle）</li></ul><p><strong>在 JavaScript 设计模式中，主要用到的设计模式基本都围绕“单一功能”和“开放封闭”这两个原则来展开。</strong></p><h4 id="设计模式的核心思想——封装变化" tabindex="-1">设计模式的核心思想——封装变化 <a class="header-anchor" href="#设计模式的核心思想——封装变化" aria-label="Permalink to &quot;设计模式的核心思想——封装变化&quot;">​</a></h4><p>在实际开发中，不发生变化的代码可以说是不存在的。<strong>我们能做的只有将这个变化造成的影响最小化 —— 将变与不变分离，确保变化的部分灵活、不变的部分稳定。</strong></p><h4 id="拓展" tabindex="-1">拓展 <a class="header-anchor" href="#拓展" aria-label="Permalink to &quot;拓展&quot;">​</a></h4><p><img src="'+r+'" alt=""></p>',10),l=[n];function _(s,c,p,d,h,u){return e(),t("div",null,l)}const g=a(o,[["render",_]]);export{m as __pageData,g as default};
